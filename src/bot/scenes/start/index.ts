import { Markup, Scenes } from 'telegraf';
import { SCENE } from '../../constants/scene';
import { ISceneBase } from '../../types/scene';
import { MyContext } from '../../types/types';

export class StartScene implements ISceneBase {
	private scene: Scenes.BaseScene<MyContext>;

	constructor() {
		this.scene = new Scenes.BaseScene<MyContext>(SCENE.START);
		this.init();
	}

	get instance(): Scenes.BaseScene<MyContext> {
		return this.scene;
	}

	init(): void {
		this.scene.action('products', (ctx) => {
			ctx.reply('C–æ—Ä—Ä–∏, –±—Ä–∞—Ç–∞–Ω, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ–∑–ª–∏ ü§∑‚Äç‚ôÇÔ∏è');
		});

		this.scene.action('cart', (ctx) => {
			ctx.reply('C–æ—Ä—Ä–∏, –±—Ä–∞—Ç–∞–Ω, –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ü§∑‚Äç‚ôÇÔ∏è');
		});

		this.scene.action('order', (ctx) => {
			ctx.reply('C–æ—Ä—Ä–∏, –±—Ä–∞—Ç–∞–Ω, –ø–æ–∫–∞ –º–∞—à–∏–Ω –Ω–µ—Ç ü§∑‚Äç‚ôÇÔ∏è');
		});

		this.scene.enter(async (ctx) => {
			ctx.reply(
				'–ß—Ç–æ —Ç—ã –∂–µ–ª–∞–µ—à—å?',
				Markup.inlineKeyboard([
					[
						Markup.button.callback('–ü–æ–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä—ã', 'products'),
						Markup.button.callback('–ü–æ–∫–∞–∂–∏ –∫–æ—Ä–∑–∏–Ω—É', 'cart'),
					],
					[Markup.button.callback('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'order')],
				]),
			);
		});
	}
}
